<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 李浩的Github Page</title>
    <link>https://lh7794.github.io/posts/</link>
    <description>Recent content in Posts on 李浩的Github Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Tue, 31 Mar 2020 14:46:49 +0800</lastBuildDate>
    
	<atom:link href="https://lh7794.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test</title>
      <link>https://lh7794.github.io/posts/test/</link>
      <pubDate>Tue, 31 Mar 2020 14:46:49 +0800</pubDate>
      
      <guid>https://lh7794.github.io/posts/test/</guid>
      <description>kubernetes核心功能  服务发现与负载均衡 容器自动装箱 存储编排 自动容器恢复 自动发布与回滚 配置与密文管理 批量执行 水平伸缩  Kubernetes的架构 Kubernetes主要由以下几个核心组件组成：
 etcd保存了整个集群的状态； apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制； controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等； scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上； kubelet负责维护容器的生命周期，同时也负责Volume（CSI）和网络（CNI）的管理； Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）； kube-proxy负责为Service提供cluster内部的服务发现和负载均衡；  除了核心组件，还有一些推荐的插件，其中有的已经成为CNCF中的托管项目：
 CoreDNS负责为整个集群提供DNS服务 Ingress Controller为服务提供外网入口 Prometheus提供资源监控 Dashboard提供GUI Federation提供跨可用区的集群  Kubernetes 架构是一个比较典型的二层架构和 server-client 架构。Master 作为中央的管控节点，会去与 Node 进行一个连接。下面是更为抽象的视图。
Master架构  **API Server：**顾名思义是用来处理 API 操作的，Kubernetes 中所有的组件都会和 API Server 进行连接，组件与组件之间一般不进行独立的连接，都依赖于 API Server 进行消息的传送； **Controller：**是控制器，它用来完成对集群状态的一些管理。比如刚刚我们提到的两个例子之中，第一个自动对容器进行修复、第二个自动进行水平扩张，都是由 Kubernetes 中的 Controller 来进行完成的； **Scheduler：**是调度器，“调度器”顾名思义就是完成调度的操作，就是我们刚才介绍的第一个例子中，把一个用户提交的 Container，依据它对 CPU、对 memory 请求大小，找一台合适的节点，进行放置； **etcd：**是一个分布式的一个存储系统，API Server 中所需要的这些原信息都被放置在 etcd 中，etcd 本身是一个高可用系统，通过 etcd 保证整个 Kubernetes 的 Master 组件的高可用性。  Node架构  Pod: Pod是Kubernetes管理的最小单位，Kubernetes不会对容器直接操作，Pod和容器是什么关系呢？Pod可以包括一个或多个容器，每个Pod都有自己的namespace(网络、存储等资源)，在一个Pod内部的多个容器之间关系类似系统间的进程之间关系，使用网络直接用localhost就可以通信。 kubelet: kubelet负责管理pods和它们上面的容器，images镜像、volumes等。 kube-proxy: 每一个节点也运行一个简单的网络代理和负载均衡，例如创建service资源需要kube-proxy。 fluentd: 日志收集工具  kubernetes的服务发现机制 ​	任何分布式系统都会涉及“服务发现”这个基础问题，大部分分布式系统都通过提供特定的API接口来实现服务发现功能，但这样做会导致平台的侵入性比较强，也增加了开发、测试的难度。Kubernetes则采用了直观朴素的思路去解决这个棘手的问题。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://lh7794.github.io/posts/about/</link>
      <pubDate>Tue, 31 Mar 2020 14:46:23 +0800</pubDate>
      
      <guid>https://lh7794.github.io/posts/about/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>