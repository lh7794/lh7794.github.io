<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lihao`s Blog on lihao`s Blog</title>
    <link>https://mogeko.github.io/</link>
    <description>Recent content in lihao`s Blog on lihao`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>https://mogeko.github.io/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/kubernetes/</guid>
      <description>&lt;h3 id=&#34;kubernetes核心功能&#34;&gt;kubernetes核心功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务发现与负载均衡&lt;/li&gt;
&lt;li&gt;容器自动装箱&lt;/li&gt;
&lt;li&gt;存储编排&lt;/li&gt;
&lt;li&gt;自动容器恢复&lt;/li&gt;
&lt;li&gt;自动发布与回滚&lt;/li&gt;
&lt;li&gt;配置与密文管理&lt;/li&gt;
&lt;li&gt;批量执行&lt;/li&gt;
&lt;li&gt;水平伸缩&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kubernetes的架构&#34;&gt;Kubernetes的架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/architecture.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes主要由以下几个核心组件组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;etcd保存了整个集群的状态；&lt;/li&gt;
&lt;li&gt;apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；&lt;/li&gt;
&lt;li&gt;controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；&lt;/li&gt;
&lt;li&gt;scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；&lt;/li&gt;
&lt;li&gt;kubelet负责维护容器的生命周期，同时也负责Volume（CSI）和网络（CNI）的管理；&lt;/li&gt;
&lt;li&gt;Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）；&lt;/li&gt;
&lt;li&gt;kube-proxy负责为Service提供cluster内部的服务发现和负载均衡；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了核心组件，还有一些推荐的插件，其中有的已经成为CNCF中的托管项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CoreDNS负责为整个集群提供DNS服务&lt;/li&gt;
&lt;li&gt;Ingress Controller为服务提供外网入口&lt;/li&gt;
&lt;li&gt;Prometheus提供资源监控&lt;/li&gt;
&lt;li&gt;Dashboard提供GUI&lt;/li&gt;
&lt;li&gt;Federation提供跨可用区的集群&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 架构是一个比较典型的二层架构和 server-client 架构。Master 作为中央的管控节点，会去与 Node 进行一个连接。下面是更为抽象的视图。&lt;/p&gt;
&lt;h4 id=&#34;master架构&#34;&gt;Master架构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/kubernetes-master-arch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**API Server：**顾名思义是用来处理 API 操作的，Kubernetes 中所有的组件都会和 API Server 进行连接，组件与组件之间一般不进行独立的连接，都依赖于 API Server 进行消息的传送；&lt;/li&gt;
&lt;li&gt;**Controller：**是控制器，它用来完成对集群状态的一些管理。比如刚刚我们提到的两个例子之中，第一个自动对容器进行修复、第二个自动进行水平扩张，都是由 Kubernetes 中的 Controller 来进行完成的；&lt;/li&gt;
&lt;li&gt;**Scheduler：**是调度器，“调度器”顾名思义就是完成调度的操作，就是我们刚才介绍的第一个例子中，把一个用户提交的 Container，依据它对 CPU、对 memory 请求大小，找一台合适的节点，进行放置；&lt;/li&gt;
&lt;li&gt;**etcd：**是一个分布式的一个存储系统，API Server 中所需要的这些原信息都被放置在 etcd 中，etcd 本身是一个高可用系统，通过 etcd 保证整个 Kubernetes 的 Master 组件的高可用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;node架构&#34;&gt;Node架构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/kubernetes-node-arch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pod:&lt;/strong&gt; Pod是Kubernetes管理的最小单位，Kubernetes不会对容器直接操作，Pod和容器是什么关系呢？Pod可以包括一个或多个容器，每个Pod都有自己的namespace(网络、存储等资源)，在一个Pod内部的多个容器之间关系类似系统间的进程之间关系，使用网络直接用localhost就可以通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kubelet:&lt;/strong&gt; kubelet负责管理pods和它们上面的容器，images镜像、volumes等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kube-proxy:&lt;/strong&gt; 每一个节点也运行一个简单的网络代理和负载均衡，例如创建service资源需要kube-proxy。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fluentd:&lt;/strong&gt; 日志收集工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kubernetes的服务发现机制&#34;&gt;kubernetes的服务发现机制&lt;/h3&gt;
&lt;p&gt;​	任何分布式系统都会涉及“服务发现”这个基础问题，大部分分布式系统都通过提供特定的API接口来实现服务发现功能，但这样做会导致平台的侵入性比较强，也增加了开发、测试的难度。Kubernetes则采用了直观朴素的思路去解决这个棘手的问题。&lt;/p&gt;
&lt;p&gt;​	首先，每个Kubernetes中的Service都有唯一的Cluster IP及唯一的名称，而名称是由开发者自己定义的，部署时也没必要改变，所以完全可以被固定在配置中。接下来的问题就是如何通过Service的名称找到对应的Cluster IP。&lt;/p&gt;
&lt;p&gt;​	最早时Kubernetes采用了Linux 环境变量（ENV），并在每个Pod的容器启动时自动注入这些环境变量。每个Service的IP地址及端口都有标准的命名规范，遵循这个命名规范，就可以通过代码访问系统环境变量来得到所需的信息，实现服务调用。&lt;/p&gt;
&lt;p&gt;​	考虑到通过环境变量获取Service地址的方式仍不太方便、不够直观，后来Kubernetes通过Add-On增值包引入了DNS系统，把服务名作为DNS域名，这样程序就可以直接使用服务名来建立通信连接了。目前，Kubernetes上的大部分应用都已经采用了DNS这种新兴的服务发现机制。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes的负载均衡机制&#34;&gt;Kubernetes的负载均衡机制&lt;/h3&gt;
&lt;p&gt;​	Kubernetes在设计之初就充分考虑了针对容器的服务发现与负载均衡机制，提供了Service资源，并通过kube-proxy配合cloud provider来适应不同的应用场景。随着Kubernetes用户的激增，用户场景的不断丰富，又产生了一些新的负载均衡机制。目前，Kubernetes中的负载均衡大致可以分为以下几种机制，每种机制都有其特定的应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Service&lt;/strong&gt;：直接用Service提供cluster内部的负载均衡，并借助cloud provider提供的LB提供外部访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ingress&lt;/strong&gt;：还是用Service提供cluster内部的负载均衡，但是通过自定义LB提供外部访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service Load Balancer&lt;/strong&gt;：把load balancer直接跑在容器中，实现Bare Metal的Service Load Balancer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom Load Balancer&lt;/strong&gt;：自定义负载均衡，并替代kube-proxy，一般在物理部署Kubernetes时使用，方便接入公司已有的外部服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器自动装箱&#34;&gt;容器自动装箱&lt;/h3&gt;
&lt;p&gt;​	容器的自动装箱，我们也会把它叫做 scheduling，就是“调度”，把一个容器放到一个集群的某一个机器上，Kubernetes 会帮助我们去做存储的编排，让存储的声明周期与容器的生命周期能有一个连接。&lt;/p&gt;
&lt;p&gt;​	Pod调度控制器：全自动调度、定向调度、Node亲和性调度、Pod亲和与互斥调度策略······等各种调度策略，甚至Kubernetes支持自定义调度器，用户可以使用自己开发的调度器进行调度。&lt;/p&gt;
&lt;p&gt;​	Deployment或RC的主要功能之一就是自动部署一个容器应用的多份副本，以及持续监控副本的数量，在集群内始终维持用户指定的副本数量。&lt;/p&gt;
&lt;h3 id=&#34;自动发布与回滚&#34;&gt;自动发布与回滚&lt;/h3&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id=&#34;批量执行&#34;&gt;批量执行&lt;/h3&gt;
&lt;p&gt;​	Kubernetes从1.2版本开始支持批处理类型的应用，我们可以通过Kubernetes Job资源对象来定义并启动一个批处理任务。批处理任务通常并行（或者串行）启动多个计算进程去处理一批工作项（work item），处理完成后，整个批处理任务结束。按照批处理任务实现方式的不同，批处理任务可以分为以下几种模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Job Template Expansion模式：一个Job对象对应一个待处理的Work item，有几个Work item就产生几个独立的Job，通常适合Work item数量少、每个Work item要处理的数据量比较大的场景。&lt;/li&gt;
&lt;li&gt;Queue with Pod Per Work item模式：采用一个任务队列存放Work item，一个Job对象作为消费者去完成这些Work item，在这种模式下，Job会启动N个Pod，每个Pod都对应一个Work item。&lt;/li&gt;
&lt;li&gt;Queue with Variable Pod Per Count模式：采用一个任务队列存放Work item，一个Job对象作为消费者去完成这些Work item，但与上面的模式不同，Job启动的Pod数量是可变的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自动容器恢复&#34;&gt;自动容器恢复&lt;/h3&gt;
&lt;p&gt;​	Kubernetes 有一个节点健康检查的功能，它会监测这个集群中所有的宿主机，当宿主机本身出现故障，或者软件出现故障的时候，这个节点健康检查会自动对它进行发现。&lt;/p&gt;
&lt;h3 id=&#34;水平伸缩&#34;&gt;水平伸缩&lt;/h3&gt;
&lt;p&gt;​	在实际生产系统中，我们经常会遇到某个服务需要扩容的场景，也可能会遇到由于资源紧张或者工作负载降低而需要减少服务实例数量的场景。此时可以利用Deployment/RC的Scale机制来完成这些工作。&lt;/p&gt;
&lt;p&gt;​	Kubernetes对Pod的扩缩容操作提供了手动和自动两种模式，手动模式通过执行kubectl scale命令或通过RESTful API对一个Deployment/RC进行Pod副本数量的设置，即可一键完成。自动模式则需要用户根据某个性能指标或者自定义业务指标，并指定Pod副本数量的范围，系统将自动在这个范围内根据性能指标的变化进行调整。&lt;/p&gt;
&lt;p&gt;​	自动扩缩容机制：Kubernetes从1.1版本开始，新增了名为Horizontal Pod Autosacler（HPA）的控制器，用于实现基于CPU使用率进行自动Pod扩缩容的功能。HPA控制器基于Master的kube-controller-manager服务启动参数&amp;ndash;horizontal-pod-autosacler-sync-period定义的探测周期（默认值为15s），周期性地监测目标Pod地资源性能指标，并于HPA资源对象中地扩缩容条件进行对比，在满足条件时对Pod副本数量进行调整。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>